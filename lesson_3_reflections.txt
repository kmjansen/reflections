# When would you want to use a remote repository rather than keeping all your work local?

    I would want to use a remote repository when working with others to enable easier collaboration
    or when working from mulitple machines. Additionally, using a remote repository can be an
    additional safeguard against catastrophic file loss on a user's local computer.

# Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Because one might not want the changes that someone else made on the remote
    repository on their local machine

# Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A fork is a remote clone of a repository on GitHub's servers, a clone
    is a copy of a remote repository into a new local repository, and
    branches are a local clones within the same local repository. One would want
    to use a fork to make an exact copy of someone else's repository to which
    he may edit without affecting the original repository, a clone when copying
    a repository that he may directly edit, and a branch when working on a
    parallel path from the master for experimental or refactoring purposes, or
    to fix bugs without affecting the functional codebase.

# What is the benefit of having a copy of the last known state of the remote
stored locally?

    So that we can work offline

# How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    To collaborate without using Git or GitHub, collaboration would probably
    take place emailing files back and forth, instant messaging with my
    collaborators to avoid conflicts, and using some other type of repository
    for file storage. Git and GitHub would be much easier since all the
    collaboration tools are built into it. The only harder aspect of this would
    be the learning curve involved in becoming familiar with using Git and
    GitHub.

# When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    One would want to make changes in a separate branch rather than directly in
    in master to ensure that we don't break our master. It is faster to not use
    separate branches, but it is safer to do so.
